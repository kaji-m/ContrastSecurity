# Generated by Django 2.2.13 on 2020-12-21 13:20

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Backlog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='名前は半角英数字、アンスコ4文字〜20文字です。', regex='^[A-Za-z0-9_]{4,20}$')], verbose_name='Name')),
                ('url', models.URLField(help_text='https://tabocom.backlog.com', verbose_name='URL')),
                ('api_key', models.CharField(max_length=100, verbose_name='API Key')),
                ('project_key', models.CharField(max_length=100, verbose_name='Project Key')),
                ('project_id', models.CharField(blank=True, max_length=10, null=True, verbose_name='Project ID')),
                ('issuetype_name', models.CharField(max_length=100, verbose_name='IssueType Name')),
                ('issuetype_id', models.CharField(blank=True, max_length=10, null=True, verbose_name='IssueType ID')),
                ('priority_name', models.CharField(max_length=100, verbose_name='Priority Name')),
                ('priority_id', models.CharField(blank=True, max_length=10, null=True, verbose_name='Priority ID')),
                ('status_reported', models.CharField(blank=True, max_length=50, null=True, verbose_name='Reported')),
                ('status_reported_priority', models.BooleanField(default=False, help_text='If the same state name is mapped, this is prioritized.', verbose_name='Prioritize')),
                ('status_reported_id', models.CharField(blank=True, max_length=10, null=True, verbose_name='Reported ID')),
                ('status_suspicious', models.CharField(blank=True, max_length=50, null=True, verbose_name='Suspicious')),
                ('status_suspicious_priority', models.BooleanField(default=False, help_text='If the same state name is mapped, this is prioritized.', verbose_name='Prioritize')),
                ('status_suspicious_id', models.CharField(blank=True, max_length=10, null=True, verbose_name='Suspicious ID')),
                ('status_confirmed', models.CharField(blank=True, max_length=50, null=True, verbose_name='Confirmed')),
                ('status_confirmed_priority', models.BooleanField(default=False, help_text='If the same state name is mapped, this is prioritized.', verbose_name='Prioritize')),
                ('status_confirmed_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='Confirmed ID')),
                ('status_notaproblem', models.CharField(blank=True, max_length=50, null=True, verbose_name='Not a Problem')),
                ('status_notaproblem_priority', models.BooleanField(default=False, help_text='If the same state name is mapped, this is prioritized.', verbose_name='Prioritize')),
                ('status_notaproblem_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='Not a Problem ID')),
                ('status_remediated', models.CharField(blank=True, max_length=50, null=True, verbose_name='Remediated')),
                ('status_remediated_priority', models.BooleanField(default=False, help_text='If the same state name is mapped, this is prioritized.', verbose_name='Prioritize')),
                ('status_remediated_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='Remediated ID')),
                ('status_fixed', models.CharField(blank=True, max_length=50, null=True, verbose_name='Fixed')),
                ('status_fixed_priority', models.BooleanField(default=False, help_text='If the same state name is mapped, this is prioritized.', verbose_name='Prioritize')),
                ('status_fixed_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='Fixed ID')),
                ('text_formatting_rule', models.CharField(blank=True, max_length=50, null=True, verbose_name='Text Formatting Rule')),
            ],
            options={
                'verbose_name': 'Backlog',
                'verbose_name_plural': 'Backlog List',
            },
        ),
        migrations.CreateModel(
            name='Gitlab',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='名前は半角英数字、アンスコ4文字〜20文字です。', regex='^[A-Za-z0-9_]{4,20}$')], verbose_name='Name')),
                ('url', models.URLField(help_text='http://gitlab.gitlab:8085', verbose_name='URL')),
                ('owner_access_token', models.CharField(blank=True, help_text='For bulk process', max_length=50, null=True, verbose_name="Project Owner's Access Token")),
                ('report_username', models.CharField(help_text='For report user(Project Maintainer is required)', max_length=50, verbose_name='Username')),
                ('access_token', models.CharField(max_length=50, verbose_name='Access Token')),
                ('project_id', models.CharField(help_text="It's a number, not a name.", max_length=5, verbose_name='Project ID')),
                ('vul_labels', models.CharField(help_text='Comma-separated list of label names', max_length=50, verbose_name='Labels(Vul)')),
                ('lib_labels', models.CharField(help_text='Comma-separated list of label names', max_length=50, verbose_name='Labels(Lib)')),
            ],
            options={
                'verbose_name': 'Gitlab',
                'verbose_name_plural': 'Gitlab List',
            },
        ),
        migrations.CreateModel(
            name='GoogleChat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='名前は半角英数字、アンスコ4文字〜20文字です。', regex='^[A-Za-z0-9_]{4,20}$')], verbose_name='Name')),
                ('webhook', models.URLField(help_text='https://chat.googleapis.com/v1/spaces/XXXXX/messages?key=YYYYY&token=ZZZZZ', verbose_name='Webhook')),
            ],
            options={
                'verbose_name': 'GoogleChat',
                'verbose_name_plural': 'GoogleChat List',
            },
        ),
        migrations.CreateModel(
            name='GitlabVul',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contrast_org_id', models.CharField(max_length=36, verbose_name='Organization ID')),
                ('contrast_app_id', models.CharField(max_length=36, verbose_name='Application ID')),
                ('contrast_vul_id', models.CharField(max_length=19, verbose_name='Vulnerability ID')),
                ('issue_id', models.CharField(max_length=100, verbose_name='Issue ID')),
                ('gitlab', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='vuls', related_query_name='vul', to='application.Gitlab', verbose_name='Gitlab')),
            ],
            options={
                'verbose_name': 'Gitlab Vulnerability',
                'verbose_name_plural': 'Gitlab Vulnerabilities',
            },
        ),
        migrations.CreateModel(
            name='GitlabNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField(verbose_name='Note')),
                ('creator', models.CharField(max_length=200, verbose_name='Creator')),
                ('created_at', models.DateTimeField(blank=True, null=True, verbose_name='Created')),
                ('updated_at', models.DateTimeField(blank=True, null=True, verbose_name='Updated')),
                ('contrast_note_id', models.CharField(max_length=36, unique=True, verbose_name='Contrast Note ID')),
                ('note_id', models.CharField(max_length=100, verbose_name='Gitlab Comment ID')),
                ('vul', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', related_query_name='note', to='application.GitlabVul', verbose_name='Gitlab Vulnerability')),
            ],
            options={
                'verbose_name': 'Gitlab Vulnerability Note',
                'verbose_name_plural': 'Gitlab Vulnerability Notes',
            },
        ),
        migrations.CreateModel(
            name='GitlabLib',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contrast_org_id', models.CharField(max_length=36, verbose_name='Organization ID')),
                ('contrast_app_id', models.CharField(max_length=36, verbose_name='Application ID')),
                ('contrast_lib_lg', models.CharField(blank=True, max_length=20, null=True, verbose_name='Library Language')),
                ('contrast_lib_id', models.CharField(blank=True, max_length=40, null=True, verbose_name='Library ID')),
                ('issue_id', models.CharField(max_length=100, verbose_name='Issue ID')),
                ('gitlab', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='libs', related_query_name='lib', to='application.Gitlab', verbose_name='Gitlab')),
            ],
            options={
                'verbose_name': 'Gitlab Library',
                'verbose_name_plural': 'Gitlab Libraries',
            },
        ),
        migrations.CreateModel(
            name='BacklogVul',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contrast_org_id', models.CharField(max_length=36, verbose_name='Organization ID')),
                ('contrast_app_id', models.CharField(max_length=36, verbose_name='Application ID')),
                ('contrast_vul_id', models.CharField(max_length=19, verbose_name='Vulnerability ID')),
                ('issue_id', models.CharField(max_length=100, verbose_name='Issue ID')),
                ('backlog', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='vuls', related_query_name='vul', to='application.Backlog', verbose_name='Backlog')),
            ],
            options={
                'verbose_name': 'Backlog Vulnerability',
                'verbose_name_plural': 'Backlog Vulnerabilities',
            },
        ),
        migrations.CreateModel(
            name='BacklogNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField(verbose_name='Comment')),
                ('creator', models.CharField(max_length=200, verbose_name='Creator')),
                ('created_at', models.DateTimeField(blank=True, null=True, verbose_name='Created')),
                ('updated_at', models.DateTimeField(blank=True, null=True, verbose_name='Updated')),
                ('contrast_note_id', models.CharField(max_length=36, unique=True, verbose_name='Contrast Note ID')),
                ('note_id', models.CharField(max_length=100, verbose_name='Backlog Comment ID')),
                ('vul', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', related_query_name='comment', to='application.BacklogVul', verbose_name='Backlog Vulnerability')),
            ],
            options={
                'verbose_name': 'Backlog Vulnerability Comment',
                'verbose_name_plural': 'Backlog Vulnerability Comments',
            },
        ),
        migrations.CreateModel(
            name='BacklogLib',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contrast_org_id', models.CharField(max_length=36, verbose_name='Organization ID')),
                ('contrast_app_id', models.CharField(max_length=36, verbose_name='Application ID')),
                ('contrast_lib_lg', models.CharField(blank=True, max_length=20, null=True, verbose_name='Library Language')),
                ('contrast_lib_id', models.CharField(blank=True, max_length=40, null=True, verbose_name='Library ID')),
                ('issue_id', models.CharField(max_length=100, verbose_name='Issue ID')),
                ('backlog', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='libs', related_query_name='lib', to='application.Backlog', verbose_name='Backlog')),
            ],
            options={
                'verbose_name': 'Backlog Library',
                'verbose_name_plural': 'Backlog Libraries',
            },
        ),
    ]
